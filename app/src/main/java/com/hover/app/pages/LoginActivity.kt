package com.hover.app.pages

import LoginData
import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.blankj.utilcode.util.SPUtils
import com.blankj.utilcode.util.ToastUtils
import com.hover.app.utils.AuthService
import com.hover.app.utils.PublicKeyResponse
import com.hover.app.utils.RsaUtils
import io.ktor.client.plugins.ClientRequestException
import io.ktor.client.plugins.ServerResponseException
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch
import java.io.IOException


class LoginActivity : ComponentActivity() {
    private val viewModel by lazy { LoginViewModel() }
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {

            LoginScreen(
                onLoginSuccess = {
                    startActivity(Intent(this@LoginActivity, MapActivity::class.java))
                    Toast.makeText(this, "ÁôªÂΩïÊàêÂäü", Toast.LENGTH_SHORT).show()
                    finish()
                }
            )
        }
    }
}

data class SavedUser(
    val username: String,
    val password: String
)

sealed class LoginState {
    object Idle : LoginState()
    object Loading : LoginState()
    data class Success(val token: LoginData?) : LoginState()
    data class Error(val exception: Throwable) : LoginState()
}

sealed class PublicKeyState {
    object Loading : PublicKeyState()
    data class Success(val publicKey: PublicKeyResponse) : PublicKeyState()
    data class Error(val exception: Throwable) : PublicKeyState()
}

class LoginViewModel : ViewModel() {
    var username by mutableStateOf("")
    var password by mutableStateOf("")

    private val _loginState = MutableStateFlow<LoginState>(LoginState.Idle)
    val loginState: StateFlow<LoginState> = _loginState

    private var _publicKeyState = MutableStateFlow<PublicKeyState>(PublicKeyState.Loading)
    val publicKeyState: StateFlow<PublicKeyState> = _publicKeyState

    var savedUsersList by mutableStateOf(mutableListOf<SavedUser>())

    init {
        Log.d("LoginViewModel", "init")
        savedUsersList = loadSavedUsers().toMutableList()
        viewModelScope.launch {
            // Âú®ÂçèÁ®ã‰ΩúÁî®ÂüüÂÜÖË∞ÉÁî®ÊåÇËµ∑ÂáΩÊï∞
            getPublicKey()
        }
    }

    private fun loadSavedUsers(): List<SavedUser> {
        val sp = SPUtils.getInstance("sp_name")
        val allEntries = sp.all // Ëé∑ÂèñÊâÄÊúâÂ≠òÂÇ®ÁöÑÈîÆÂÄºÂØπ
        println("allEntries=$allEntries")
        return allEntries
            .filterKeys { it.startsWith("loginuser_") } // ËøáÊª§Âá∫ÁôªÂΩïÁî®Êà∑
            .mapNotNull { (key, value) ->
                val username = key.removePrefix("loginuser_")
                if (username.isNotEmpty() && value is String) {
                    SavedUser(username, value)
                } else {
                    null
                }
            }
    }

    // ÊâßË°åÁôªÂΩïÊìç‰Ωú
    fun performLogin() {
        viewModelScope.launch(Dispatchers.IO) {
            try {
                val result = AuthService.getPermissions()

                result.fold(
                    onSuccess = { response ->
                        Log.d(
                            "Login",
                            "‚úÖ ËØ∑Ê±ÇÊàêÂäü! Áä∂ÊÄÅ: ${response.code}, Ê∂àÊÅØ: ${response.message}"
                        )
                        Log.d("Login", "üõ°Ô∏è ÊùÉÈôêÂàóË°® (${response.data} È°π):")
                        response.data.forEachIndexed { index, permission ->
                            Log.d(
                                "Login",
                                "${index + 1}. ${permission.name} - ${permission.description}"
                            )
                        }

                    },
                    onFailure = { error ->
                        Log.e("Login", "‚ùå ËØ∑Ê±ÇÂ§±Ë¥•", error)
                        when (error) {
                            is ClientRequestException ->
                                Log.e("Login", "ÂÆ¢Êà∑Á´ØÈîôËØØ: ${error.response.status}")

                            is ServerResponseException ->
                                Log.e("Login", "ÊúçÂä°Âô®ÈîôËØØ: ${error.response.status}")

                            is IOException ->
                                Log.e("Login", "ÁΩëÁªúÈîôËØØ: ${error.message}")

                            else ->
                                Log.e("Login", "Êú™Áü•ÈîôËØØ: ${error.message}")
                        }
                    }
                )


                // ÂèØËÉΩÊäõÂá∫ÂºÇÂ∏∏ÁöÑ‰ª£Á†Å
            } catch (e: Exception) {
                println("Error logging in: ${e.message}")
                e.printStackTrace()
            }
        }
    }

    suspend fun login(username: String, password: String) {
        // Á°Æ‰øùÂÖ¨Èí•Â∑≤Ëé∑Âèñ
        val publicKey = when (val state = publicKeyState.value) {
            is PublicKeyState.Success -> {
                Log.d("Login", "ÂÖ¨Èí•: ${state.publicKey}")
                state.publicKey.data
            }

            else -> {
                ""
            }

        }
//  ËøõË°åÂä†ÂØÜ
        val publicKey1 = publicKey.replace("\n", "")
        var encryptedPassword = RsaUtils.encrypt(password, publicKey1)
        _loginState.value = LoginState.Loading
        try {
            val result = AuthService.login(username, encryptedPassword)
            result.fold(
                onSuccess = { response ->
                    val token = response.data
                    Log.d("login", "ÁôªÂΩïÊàêÂäü: ${response},$response")
                    if (response.data == null) {
                        _loginState.value = LoginState.Error(exception = Exception("ÁôªÂΩïÂ§±Ë¥•"))
                        // ÁôªÂΩïÂ§±Ë¥•ËøõË°åÂêêÂè∏ÊèêÁ§∫
                        ToastUtils.showLong("ÁôªÂΩïÂ§±Ë¥•")
                    } else {
                        _loginState.value = LoginState.Success(token)
                        ToastUtils.showLong("ÁôªÂΩïÊàêÂäü")
                    }
                    // ‰øùÂ≠òtokenÁ≠âÊìç‰Ωú
                },
                onFailure = { error ->
                    _loginState.value = LoginState.Error(error)
                }
            )
        } catch (e: Exception) {
            _loginState.value = LoginState.Error(e)
        }
    }

    // Ëé∑ÂèñÂÖ¨Èí•
    suspend fun getPublicKey() {
        _publicKeyState.value = PublicKeyState.Loading

        try {
            val result = AuthService.getKey()
            result.fold(
                onSuccess = { response ->
                    _publicKeyState.value = PublicKeyState.Success(response)
                    Log.d("Login", "ÂÖ¨Èí•: $response")
                },
                onFailure = { error ->
                    _publicKeyState.value = PublicKeyState.Error(error)
                }
            )
        } catch (e: Exception) {
            _publicKeyState.value = PublicKeyState.Error(e)
        }
    }
}


